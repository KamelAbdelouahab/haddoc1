# -*- coding: utf-8 -*-
import os
import sys

C2V_DIRNAME         = os.path.dirname(os.path.realpath(__file__))
C2V_PYTHON_LIB      = C2V_DIRNAME + '/lib/python'
C2V_CAPH_LIB        = C2V_DIRNAME + '/lib/caph'
C2V_CPP_LIB         = C2V_DIRNAME + '/lib/cpp'
CAPH_GENERATED      = C2V_DIRNAME + '/../caph_generated'


sys.path.insert(0, C2V_PYTHON_LIB)


from caph_net_lib   import *
from params_lib     import *
from utils_lib      import *
from copy           import deepcopy
import subprocess
import math


print("THIS IS HADOC HLS TOOL \n")

# if (len(sys.argv) == 1):
#     print(" \t Backdoor 1 : Using the DreamNet network with 6 bits for parameter representation " '')
#     prototxt    = '../example/dreamnet/train.prototxt'
#     caffemodel  = '../example/dreamnet/dreamnet.caffemodel'
#     nb_bits     = 6
#
# else:
#     if (len(sys.argv) == 2):
#         prototxt    = '../example/dreamnet/train.prototxt'
#         caffemodel  = '../example/dreamnet/dreamnet.caffemodel'
#         nb_bits     = int(sys.argv[1])
#
#     else:
#         if (len(sys.argv) != 3):
#             sys.exit("Not enough args!")
#         else:
#             prototxt    = sys.argv[1]
#             caffemodel  = sys.argv[2]
#             nb_bits     = sys.argv[3]

prototxt    = sys.argv[1]
caffemodel  = sys.argv[2]
nb_bits     = sys.argv[3]

print("\t Network used at: " + prototxt + '')
print("\t caffemodel at: " + caffemodel + '')
print("\t Parameter represented in : " + str(nb_bits) + " bits fixed point " +'')


#SUPRESS CAFFE DISPLAY WHEN READING NETWORK
os.environ["GLOG_minloglevel"] = "1"
import caffe
Network = caffe.Net(prototxt,caffe.TEST,weights=caffemodel)
os.environ["GLOG_minloglevel"] = "0"

nb_bits = int(nb_bits)
shiftnorm = nb_bits - 1
scale_factor = math.pow(2,(nb_bits - 1)) - 1

#========================================================================================================
# ------------------------------   Generate weights caph file  ----------------------------
#=======================================================================================================

caph_dataype = "signed<8>"
caph_weights_filename = CAPH_GENERATED + '/weights.cph'

f= open(caph_weights_filename,'w')
f.write("-- File Generated by the Caphee HLS Tool\n------------------------------------------------\n");
f.close()


Blobs = Network.blobs
for b in list(Blobs.keys()):
  if 'label' in b or 'cla' in b or 'data' in b:
    del Blobs[b]

for k in list(Blobs.keys()):
    if 'conv' in k:
        if 'conv1'in k:
            GenerateFirstConvCst(caph_weights_filename,Network.params[k],scale_factor,caph_dataype)
        else :
            (filter_fixedpt,biais_fixept) = ConvLayerFixedpoint(Network.params[k],scale_factor)
            GenerateConvCst(caph_weights_filename,k,filter_fixedpt,biais_fixept,caph_dataype)
    if ('fc' in k):
        (filter_fixedpt,biais_fixept) = IPLayerFixedpoint(Network.params[k],scale_factor)
        GenerateIPCst(caph_weights_filename,k,Network.params,filter_fixedpt,biais_fixept, previous_layer,caph_dataype)
    previous_layer = k
print("\n > Succefully extracted network parameters in: \n \t " + caph_weights_filename +'')

#========================================================================================================
# -------------------------------------  Generate CAPH Network   ---------------------------------------
#=======================================================================================================

caph_net_filename = CAPH_GENERATED + '/cnn_generated.cph'

genCaph_Headers(caph_net_filename)
genCaph_CNN(Network,caph_net_filename,caph_dataype,"conv233c_wb_opt",shiftnorm)
genCaph_FC(Network,caph_net_filename,caph_dataype,C2V_CPP_LIB,C2V_DIRNAME)

print(" > Succefully generated caph network in: \n \t " + caph_net_filename +' \n')
